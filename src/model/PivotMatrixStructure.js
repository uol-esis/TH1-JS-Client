/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConverterType from './ConverterType';

/**
 * The PivotMatrixStructure model module.
 * @module model/PivotMatrixStructure
 * @version 1.25.0
 */
class PivotMatrixStructure {
    /**
     * Constructs a new <code>PivotMatrixStructure</code>.
     * This converter remove certain columns from a pivot matrix based on their indices.  In addition, the converter supports the definition of block indices to separate logical data blocks  within the matrix. This is particularly helpful if several pivot structures  occur one after the other in a table.  The &#39;keysToCarryForward&#39; field can be used to specify certain column names whose  values are to be carried forward automatically from previous rows when empty cells occur  (so-called \&quot;carry forward\&quot;).  Notes: - ‘columnIndex’ is a list of the column indices to be removed. An invalid index leads to an error. - ‘blockIndices’ defines the rows at which new data blocks start (default: [0]). - &#39;keysToCarryForward&#39; contains the column names where missing values are to be filled in.  The converterType MUST be PIVOT_MATRIX. 
     * @alias module:model/PivotMatrixStructure
     * @param converterType {module:model/ConverterType} 
     */
    constructor(converterType) { 
        
        PivotMatrixStructure.initialize(this, converterType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, converterType) { 
        obj['converterType'] = converterType;
    }

    /**
     * Constructs a <code>PivotMatrixStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PivotMatrixStructure} obj Optional instance to populate.
     * @return {module:model/PivotMatrixStructure} The populated <code>PivotMatrixStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PivotMatrixStructure();

            if (data.hasOwnProperty('converterType')) {
                obj['converterType'] = ConverterType.constructFromObject(data['converterType']);
            }
            if (data.hasOwnProperty('pivotField')) {
                obj['pivotField'] = ApiClient.convertToType(data['pivotField'], {'String': ['Number']});
            }
            if (data.hasOwnProperty('blockIndices')) {
                obj['blockIndices'] = ApiClient.convertToType(data['blockIndices'], ['Number']);
            }
            if (data.hasOwnProperty('keysToCarryForward')) {
                obj['keysToCarryForward'] = ApiClient.convertToType(data['keysToCarryForward'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PivotMatrixStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PivotMatrixStructure</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PivotMatrixStructure.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blockIndices'])) {
            throw new Error("Expected the field `blockIndices` to be an array in the JSON data but got " + data['blockIndices']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keysToCarryForward'])) {
            throw new Error("Expected the field `keysToCarryForward` to be an array in the JSON data but got " + data['keysToCarryForward']);
        }

        return true;
    }


}

PivotMatrixStructure.RequiredProperties = ["converterType"];

/**
 * @member {module:model/ConverterType} converterType
 */
PivotMatrixStructure.prototype['converterType'] = undefined;

/**
 * @member {Object.<String, Array.<Number>>} pivotField
 */
PivotMatrixStructure.prototype['pivotField'] = undefined;

/**
 * Indices that define the start of new data blocks
 * @member {Array.<Number>} blockIndices
 */
PivotMatrixStructure.prototype['blockIndices'] = undefined;

/**
 * Column names whose values should be carried forward if empty
 * @member {Array.<String>} keysToCarryForward
 */
PivotMatrixStructure.prototype['keysToCarryForward'] = undefined;






export default PivotMatrixStructure;

