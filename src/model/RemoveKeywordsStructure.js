/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.26.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConverterType from './ConverterType';

/**
 * The RemoveKeywordsStructure model module.
 * @module model/RemoveKeywordsStructure
 * @version 1.26.0
 */
class RemoveKeywordsStructure {
    /**
     * Constructs a new <code>RemoveKeywordsStructure</code>.
     * Configuration to remove rows and/or columns that contain specified keywords.
     * @alias module:model/RemoveKeywordsStructure
     * @param converterType {module:model/ConverterType} 
     * @param removeRows {Boolean} Whether to remove rows that contain a matching keyword.
     * @param removeColumns {Boolean} Whether to remove columns that contain a matching keyword.
     * @param ignoreCase {Boolean} 
     * @param matchType {module:model/RemoveKeywordsStructure.MatchTypeEnum} 
     */
    constructor(converterType, removeRows, removeColumns, ignoreCase, matchType) { 
        
        RemoveKeywordsStructure.initialize(this, converterType, removeRows, removeColumns, ignoreCase, matchType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, converterType, removeRows, removeColumns, ignoreCase, matchType) { 
        obj['converterType'] = converterType;
        obj['removeRows'] = removeRows || true;
        obj['removeColumns'] = removeColumns || true;
        obj['ignoreCase'] = ignoreCase || true;
        obj['matchType'] = matchType || 'CONTAINS';
    }

    /**
     * Constructs a <code>RemoveKeywordsStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RemoveKeywordsStructure} obj Optional instance to populate.
     * @return {module:model/RemoveKeywordsStructure} The populated <code>RemoveKeywordsStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RemoveKeywordsStructure();

            if (data.hasOwnProperty('converterType')) {
                obj['converterType'] = ConverterType.constructFromObject(data['converterType']);
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('removeRows')) {
                obj['removeRows'] = ApiClient.convertToType(data['removeRows'], 'Boolean');
            }
            if (data.hasOwnProperty('removeColumns')) {
                obj['removeColumns'] = ApiClient.convertToType(data['removeColumns'], 'Boolean');
            }
            if (data.hasOwnProperty('ignoreCase')) {
                obj['ignoreCase'] = ApiClient.convertToType(data['ignoreCase'], 'Boolean');
            }
            if (data.hasOwnProperty('matchType')) {
                obj['matchType'] = ApiClient.convertToType(data['matchType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RemoveKeywordsStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RemoveKeywordsStructure</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RemoveKeywordsStructure.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['matchType'] && !(typeof data['matchType'] === 'string' || data['matchType'] instanceof String)) {
            throw new Error("Expected the field `matchType` to be a primitive type in the JSON string but got " + data['matchType']);
        }

        return true;
    }


}

RemoveKeywordsStructure.RequiredProperties = ["converterType", "removeRows", "removeColumns", "ignoreCase", "matchType"];

/**
 * @member {module:model/ConverterType} converterType
 */
RemoveKeywordsStructure.prototype['converterType'] = undefined;

/**
 * A list of keywords to match against.  If a cell contains any of these keywords, the corresponding row or column will be removed. 
 * @member {Array.<String>} keywords
 */
RemoveKeywordsStructure.prototype['keywords'] = undefined;

/**
 * Whether to remove rows that contain a matching keyword.
 * @member {Boolean} removeRows
 * @default true
 */
RemoveKeywordsStructure.prototype['removeRows'] = true;

/**
 * Whether to remove columns that contain a matching keyword.
 * @member {Boolean} removeColumns
 * @default true
 */
RemoveKeywordsStructure.prototype['removeColumns'] = true;

/**
 * @member {Boolean} ignoreCase
 * @default true
 */
RemoveKeywordsStructure.prototype['ignoreCase'] = true;

/**
 * @member {module:model/RemoveKeywordsStructure.MatchTypeEnum} matchType
 * @default 'CONTAINS'
 */
RemoveKeywordsStructure.prototype['matchType'] = 'CONTAINS';





/**
 * Allowed values for the <code>matchType</code> property.
 * @enum {String}
 * @readonly
 */
RemoveKeywordsStructure['MatchTypeEnum'] = {

    /**
     * value: "CONTAINS"
     * @const
     */
    "CONTAINS": "CONTAINS",

    /**
     * value: "EQUALS"
     * @const
     */
    "EQUALS": "EQUALS"
};



export default RemoveKeywordsStructure;

