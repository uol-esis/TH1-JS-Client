/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Structure from './Structure';

/**
 * The TableStructure model module.
 * @module model/TableStructure
 * @version 1.5.0
 */
class TableStructure {
    /**
     * Constructs a new <code>TableStructure</code>.
     * @alias module:model/TableStructure
     * @param name {String} 
     * @param structures {Array.<module:model/Structure>} 
     */
    constructor(name, structures) { 
        
        TableStructure.initialize(this, name, structures);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, structures) { 
        obj['name'] = name;
        obj['structures'] = structures;
    }

    /**
     * Constructs a <code>TableStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableStructure} obj Optional instance to populate.
     * @return {module:model/TableStructure} The populated <code>TableStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableStructure();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('structures')) {
                obj['structures'] = ApiClient.convertToType(data['structures'], [Structure]);
            }
            if (data.hasOwnProperty('endRow')) {
                obj['endRow'] = ApiClient.convertToType(data['endRow'], 'Number');
            }
            if (data.hasOwnProperty('endColumn')) {
                obj['endColumn'] = ApiClient.convertToType(data['endColumn'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableStructure</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TableStructure.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['structures']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['structures'])) {
                throw new Error("Expected the field `structures` to be an array in the JSON data but got " + data['structures']);
            }
            // validate the optional field `structures` (array)
            for (const item of data['structures']) {
                Structure.validateJSON(item);
            };
        }

        return true;
    }


}

TableStructure.RequiredProperties = ["name", "structures"];

/**
 * @member {Number} id
 */
TableStructure.prototype['id'] = undefined;

/**
 * @member {String} name
 */
TableStructure.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Structure>} structures
 */
TableStructure.prototype['structures'] = undefined;

/**
 * @member {Number} endRow
 */
TableStructure.prototype['endRow'] = undefined;

/**
 * @member {Number} endColumn
 */
TableStructure.prototype['endColumn'] = undefined;






export default TableStructure;

