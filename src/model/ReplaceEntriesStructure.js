/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.12.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConverterType from './ConverterType';

/**
 * The ReplaceEntriesStructure model module.
 * @module model/ReplaceEntriesStructure
 * @version 1.12.0
 */
class ReplaceEntriesStructure {
    /**
     * Constructs a new <code>ReplaceEntriesStructure</code>.
     * @alias module:model/ReplaceEntriesStructure
     * @param converterType {module:model/ConverterType} 
     * @param replacement {String} 
     */
    constructor(converterType, replacement) { 
        
        ReplaceEntriesStructure.initialize(this, converterType, replacement);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, converterType, replacement) { 
        obj['converterType'] = converterType;
        obj['replacement'] = replacement;
    }

    /**
     * Constructs a <code>ReplaceEntriesStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplaceEntriesStructure} obj Optional instance to populate.
     * @return {module:model/ReplaceEntriesStructure} The populated <code>ReplaceEntriesStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplaceEntriesStructure();

            if (data.hasOwnProperty('converterType')) {
                obj['converterType'] = ConverterType.constructFromObject(data['converterType']);
            }
            if (data.hasOwnProperty('search')) {
                obj['search'] = ApiClient.convertToType(data['search'], 'String');
            }
            if (data.hasOwnProperty('regexSearch')) {
                obj['regexSearch'] = ApiClient.convertToType(data['regexSearch'], 'String');
            }
            if (data.hasOwnProperty('replacement')) {
                obj['replacement'] = ApiClient.convertToType(data['replacement'], 'String');
            }
            if (data.hasOwnProperty('startRow')) {
                obj['startRow'] = ApiClient.convertToType(data['startRow'], 'Number');
            }
            if (data.hasOwnProperty('startColumn')) {
                obj['startColumn'] = ApiClient.convertToType(data['startColumn'], 'Number');
            }
            if (data.hasOwnProperty('endRow')) {
                obj['endRow'] = ApiClient.convertToType(data['endRow'], 'Number');
            }
            if (data.hasOwnProperty('endColumn')) {
                obj['endColumn'] = ApiClient.convertToType(data['endColumn'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplaceEntriesStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplaceEntriesStructure</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReplaceEntriesStructure.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['search'] && !(typeof data['search'] === 'string' || data['search'] instanceof String)) {
            throw new Error("Expected the field `search` to be a primitive type in the JSON string but got " + data['search']);
        }
        // ensure the json data is a string
        if (data['regexSearch'] && !(typeof data['regexSearch'] === 'string' || data['regexSearch'] instanceof String)) {
            throw new Error("Expected the field `regexSearch` to be a primitive type in the JSON string but got " + data['regexSearch']);
        }
        // ensure the json data is a string
        if (data['replacement'] && !(typeof data['replacement'] === 'string' || data['replacement'] instanceof String)) {
            throw new Error("Expected the field `replacement` to be a primitive type in the JSON string but got " + data['replacement']);
        }

        return true;
    }


}

ReplaceEntriesStructure.RequiredProperties = ["converterType", "replacement"];

/**
 * @member {module:model/ConverterType} converterType
 */
ReplaceEntriesStructure.prototype['converterType'] = undefined;

/**
 * @member {String} search
 */
ReplaceEntriesStructure.prototype['search'] = undefined;

/**
 * @member {String} regexSearch
 */
ReplaceEntriesStructure.prototype['regexSearch'] = undefined;

/**
 * @member {String} replacement
 */
ReplaceEntriesStructure.prototype['replacement'] = undefined;

/**
 * @member {Number} startRow
 */
ReplaceEntriesStructure.prototype['startRow'] = undefined;

/**
 * @member {Number} startColumn
 */
ReplaceEntriesStructure.prototype['startColumn'] = undefined;

/**
 * @member {Number} endRow
 */
ReplaceEntriesStructure.prototype['endRow'] = undefined;

/**
 * @member {Number} endColumn
 */
ReplaceEntriesStructure.prototype['endColumn'] = undefined;






export default ReplaceEntriesStructure;

