/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnTypeMismatch from './ColumnTypeMismatch';
import ColumnTypeMismatchReport from './ColumnTypeMismatchReport';
import EmptyColumnReport from './EmptyColumnReport';
import EmptyHeaderReport from './EmptyHeaderReport';
import EmptyRowReport from './EmptyRowReport';
import GroupedHeaderReport from './GroupedHeaderReport';
import MergeableColumnsReport from './MergeableColumnsReport';
import MissingEntryReport from './MissingEntryReport';
import Position from './Position';
import ReportType from './ReportType';
import SameAsHeaderReport from './SameAsHeaderReport';
import SplitRowReport from './SplitRowReport';
import SumReport from './SumReport';

/**
 * The Report model module.
 * @module model/Report
 * @version 1.20.0
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * @alias module:model/Report
     * @param {(module:model/ColumnTypeMismatchReport|module:model/EmptyColumnReport|module:model/EmptyHeaderReport|module:model/EmptyRowReport|module:model/GroupedHeaderReport|module:model/MergeableColumnsReport|module:model/MissingEntryReport|module:model/SameAsHeaderReport|module:model/SplitRowReport|module:model/SumReport)} instance The actual instance to initialize Report.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        var discriminatorInstance = null;
        try {
            if (typeof instance === "ColumnTypeMismatchReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ColumnTypeMismatchReport.validateJSON(instance); // throw an exception if no match
                // create ColumnTypeMismatchReport from JS object
                this.actualInstance = ColumnTypeMismatchReport.constructFromObject(instance);
                if (instance.reportType == "COLUMN_TYPE_MISMATCH")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ColumnTypeMismatchReport
            errorMessages.push("Failed to construct ColumnTypeMismatchReport: " + err)
        }

        try {
            if (typeof instance === "EmptyColumnReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EmptyColumnReport.validateJSON(instance); // throw an exception if no match
                // create EmptyColumnReport from JS object
                this.actualInstance = EmptyColumnReport.constructFromObject(instance);
                if (instance.reportType == "EMPTY_COLUMN")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EmptyColumnReport
            errorMessages.push("Failed to construct EmptyColumnReport: " + err)
        }

        try {
            if (typeof instance === "EmptyHeaderReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EmptyHeaderReport.validateJSON(instance); // throw an exception if no match
                // create EmptyHeaderReport from JS object
                this.actualInstance = EmptyHeaderReport.constructFromObject(instance);
                if (instance.reportType == "EMPTY_HEADER")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EmptyHeaderReport
            errorMessages.push("Failed to construct EmptyHeaderReport: " + err)
        }

        try {
            if (typeof instance === "EmptyRowReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EmptyRowReport.validateJSON(instance); // throw an exception if no match
                // create EmptyRowReport from JS object
                this.actualInstance = EmptyRowReport.constructFromObject(instance);
                if (instance.reportType == "EMPTY_ROW")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EmptyRowReport
            errorMessages.push("Failed to construct EmptyRowReport: " + err)
        }

        try {
            if (typeof instance === "GroupedHeaderReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GroupedHeaderReport.validateJSON(instance); // throw an exception if no match
                // create GroupedHeaderReport from JS object
                this.actualInstance = GroupedHeaderReport.constructFromObject(instance);
                if (instance.reportType == "GROUPED_HEADER")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GroupedHeaderReport
            errorMessages.push("Failed to construct GroupedHeaderReport: " + err)
        }

        try {
            if (typeof instance === "MergeableColumnsReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MergeableColumnsReport.validateJSON(instance); // throw an exception if no match
                // create MergeableColumnsReport from JS object
                this.actualInstance = MergeableColumnsReport.constructFromObject(instance);
                if (instance.reportType == "MERGEABLE_COLUMNS")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MergeableColumnsReport
            errorMessages.push("Failed to construct MergeableColumnsReport: " + err)
        }

        try {
            if (typeof instance === "MissingEntryReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MissingEntryReport.validateJSON(instance); // throw an exception if no match
                // create MissingEntryReport from JS object
                this.actualInstance = MissingEntryReport.constructFromObject(instance);
                if (instance.reportType == "MISSING_ENTRY")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MissingEntryReport
            errorMessages.push("Failed to construct MissingEntryReport: " + err)
        }

        try {
            if (typeof instance === "SameAsHeaderReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SameAsHeaderReport.validateJSON(instance); // throw an exception if no match
                // create SameAsHeaderReport from JS object
                this.actualInstance = SameAsHeaderReport.constructFromObject(instance);
                if (instance.reportType == "SAME_AS_HEADER")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SameAsHeaderReport
            errorMessages.push("Failed to construct SameAsHeaderReport: " + err)
        }

        try {
            if (typeof instance === "SplitRowReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SplitRowReport.validateJSON(instance); // throw an exception if no match
                // create SplitRowReport from JS object
                this.actualInstance = SplitRowReport.constructFromObject(instance);
                if (instance.reportType == "SPLIT_ROW")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SplitRowReport
            errorMessages.push("Failed to construct SplitRowReport: " + err)
        }

        try {
            if (typeof instance === "SumReport") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SumReport.validateJSON(instance); // throw an exception if no match
                // create SumReport from JS object
                this.actualInstance = SumReport.constructFromObject(instance);
                if (instance.reportType == "SUM")
                    discriminatorInstance = this.actualInstance;
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SumReport
            errorMessages.push("Failed to construct SumReport: " + err)
        }

        if (discriminatorInstance) {
            this.actualInstance = discriminatorInstance;
        } else if (match > 1) {
            throw new Error("Multiple matches found constructing `Report` with oneOf schemas ColumnTypeMismatchReport, EmptyColumnReport, EmptyHeaderReport, EmptyRowReport, GroupedHeaderReport, MergeableColumnsReport, MissingEntryReport, SameAsHeaderReport, SplitRowReport, SumReport. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `Report` with oneOf schemas ColumnTypeMismatchReport, EmptyColumnReport, EmptyHeaderReport, EmptyRowReport, GroupedHeaderReport, MergeableColumnsReport, MissingEntryReport, SameAsHeaderReport, SplitRowReport, SumReport. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        return new Report(data);
    }

    /**
     * Gets the actual instance, which can be <code>ColumnTypeMismatchReport</code>, <code>EmptyColumnReport</code>, <code>EmptyHeaderReport</code>, <code>EmptyRowReport</code>, <code>GroupedHeaderReport</code>, <code>MergeableColumnsReport</code>, <code>MissingEntryReport</code>, <code>SameAsHeaderReport</code>, <code>SplitRowReport</code>, <code>SumReport</code>.
     * @return {(module:model/ColumnTypeMismatchReport|module:model/EmptyColumnReport|module:model/EmptyHeaderReport|module:model/EmptyRowReport|module:model/GroupedHeaderReport|module:model/MergeableColumnsReport|module:model/MissingEntryReport|module:model/SameAsHeaderReport|module:model/SplitRowReport|module:model/SumReport)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ColumnTypeMismatchReport</code>, <code>EmptyColumnReport</code>, <code>EmptyHeaderReport</code>, <code>EmptyRowReport</code>, <code>GroupedHeaderReport</code>, <code>MergeableColumnsReport</code>, <code>MissingEntryReport</code>, <code>SameAsHeaderReport</code>, <code>SplitRowReport</code>, <code>SumReport</code>.
     * @param {(module:model/ColumnTypeMismatchReport|module:model/EmptyColumnReport|module:model/EmptyHeaderReport|module:model/EmptyRowReport|module:model/GroupedHeaderReport|module:model/MergeableColumnsReport|module:model/MissingEntryReport|module:model/SameAsHeaderReport|module:model/SplitRowReport|module:model/SumReport)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = Report.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of Report from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/Report} An instance of Report.
     */
    static fromJSON = function(json_string){
        return Report.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/ReportType} reportType
 */
Report.prototype['reportType'] = undefined;

/**
 * @member {Array.<module:model/ColumnTypeMismatch>} mismatches
 */
Report.prototype['mismatches'] = undefined;

/**
 * @member {Array.<Number>} rowIndex
 */
Report.prototype['rowIndex'] = undefined;

/**
 * @member {Array.<Number>} columnIndex
 */
Report.prototype['columnIndex'] = undefined;

/**
 * @member {Number} startRow
 */
Report.prototype['startRow'] = undefined;

/**
 * @member {Number} startColumn
 */
Report.prototype['startColumn'] = undefined;

/**
 * @member {Array.<Number>} rowsToFill
 */
Report.prototype['rowsToFill'] = undefined;

/**
 * @member {Array.<Number>} columnsToFill
 */
Report.prototype['columnsToFill'] = undefined;

/**
 * @member {Array.<String>} headerNames
 */
Report.prototype['headerNames'] = undefined;

/**
 * @member {Array.<module:model/Position>} cells
 */
Report.prototype['cells'] = undefined;

/**
 * @member {Array.<Number>} mergeables
 */
Report.prototype['mergeables'] = undefined;


Report.OneOf = ["ColumnTypeMismatchReport", "EmptyColumnReport", "EmptyHeaderReport", "EmptyRowReport", "GroupedHeaderReport", "MergeableColumnsReport", "MissingEntryReport", "SameAsHeaderReport", "SplitRowReport", "SumReport"];

export default Report;

