/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConverterType from './ConverterType';

/**
 * The SplitCellStructure model module.
 * @module model/SplitCellStructure
 * @version 1.25.0
 */
class SplitCellStructure {
    /**
     * Constructs a new <code>SplitCellStructure</code>.
     * This converter splits the entries in the specified column into multiple rows or columns. The entries will be split by the specified delimiter. The delimiter is a line break by default. The new rows or columns will replace the original row or column. If the specified column index is out of bounds, an error will be thrown. If the specified delimiter is not found in the entry, the entry will not be split. If the specified startRow is greater than the endRow, an error will be thrown. If the specified startRow is out of bounds, an error will be thrown. If the specified endRow is out of bounds, an error will be thrown.    The converterType MUST be SPLIT_ROW. 
     * @alias module:model/SplitCellStructure
     * @param converterType {module:model/ConverterType} 
     * @param columnIndex {Number} The index of the column with the entries to split
     */
    constructor(converterType, columnIndex) { 
        
        SplitCellStructure.initialize(this, converterType, columnIndex);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, converterType, columnIndex) { 
        obj['converterType'] = converterType;
        obj['columnIndex'] = columnIndex;
    }

    /**
     * Constructs a <code>SplitCellStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SplitCellStructure} obj Optional instance to populate.
     * @return {module:model/SplitCellStructure} The populated <code>SplitCellStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SplitCellStructure();

            if (data.hasOwnProperty('converterType')) {
                obj['converterType'] = ConverterType.constructFromObject(data['converterType']);
            }
            if (data.hasOwnProperty('columnIndex')) {
                obj['columnIndex'] = ApiClient.convertToType(data['columnIndex'], 'Number');
            }
            if (data.hasOwnProperty('delimiter')) {
                obj['delimiter'] = ApiClient.convertToType(data['delimiter'], 'String');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('startRow')) {
                obj['startRow'] = ApiClient.convertToType(data['startRow'], 'Number');
            }
            if (data.hasOwnProperty('endRow')) {
                obj['endRow'] = ApiClient.convertToType(data['endRow'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SplitCellStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SplitCellStructure</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SplitCellStructure.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['delimiter'] && !(typeof data['delimiter'] === 'string' || data['delimiter'] instanceof String)) {
            throw new Error("Expected the field `delimiter` to be a primitive type in the JSON string but got " + data['delimiter']);
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }

        return true;
    }


}

SplitCellStructure.RequiredProperties = ["converterType", "columnIndex"];

/**
 * @member {module:model/ConverterType} converterType
 */
SplitCellStructure.prototype['converterType'] = undefined;

/**
 * The index of the column with the entries to split
 * @member {Number} columnIndex
 */
SplitCellStructure.prototype['columnIndex'] = undefined;

/**
 * The delimiter to split the entries by. Line break by default. 
 * @member {String} delimiter
 */
SplitCellStructure.prototype['delimiter'] = undefined;

/**
 * The mode to split the entries. Can be either 'row' or 'column'. 'row' will split the entries into multiple rows. 'column' will split the entries into multiple columns. 
 * @member {module:model/SplitCellStructure.ModeEnum} mode
 */
SplitCellStructure.prototype['mode'] = undefined;

/**
 * The start row index of the area to split (inclusive).
 * @member {Number} startRow
 */
SplitCellStructure.prototype['startRow'] = undefined;

/**
 * The end row index of the area to split (exclusive).
 * @member {Number} endRow
 */
SplitCellStructure.prototype['endRow'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
SplitCellStructure['ModeEnum'] = {

    /**
     * value: "row"
     * @const
     */
    "row": "row",

    /**
     * value: "column"
     * @const
     */
    "column": "column"
};



export default SplitCellStructure;

