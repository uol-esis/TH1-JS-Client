/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.23.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConverterType from './ConverterType';

/**
 * The TransposeMatrixStructure model module.
 * @module model/TransposeMatrixStructure
 * @version 1.23.0
 */
class TransposeMatrixStructure {
    /**
     * Constructs a new <code>TransposeMatrixStructure</code>.
     * This converter transposes the given matrix. 
     * @alias module:model/TransposeMatrixStructure
     * @param converterType {module:model/ConverterType} 
     */
    constructor(converterType) { 
        
        TransposeMatrixStructure.initialize(this, converterType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, converterType) { 
        obj['converterType'] = converterType;
    }

    /**
     * Constructs a <code>TransposeMatrixStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransposeMatrixStructure} obj Optional instance to populate.
     * @return {module:model/TransposeMatrixStructure} The populated <code>TransposeMatrixStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransposeMatrixStructure();

            if (data.hasOwnProperty('converterType')) {
                obj['converterType'] = ConverterType.constructFromObject(data['converterType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransposeMatrixStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransposeMatrixStructure</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransposeMatrixStructure.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

TransposeMatrixStructure.RequiredProperties = ["converterType"];

/**
 * @member {module:model/ConverterType} converterType
 */
TransposeMatrixStructure.prototype['converterType'] = undefined;






export default TransposeMatrixStructure;

