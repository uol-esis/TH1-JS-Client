/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.26.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConverterType from './ConverterType';

/**
 * The AddHeaderNameStructure model module.
 * @module model/AddHeaderNameStructure
 * @version 1.26.0
 */
class AddHeaderNameStructure {
    /**
     * Constructs a new <code>AddHeaderNameStructure</code>.
     * This converter replaces the first row of the table with the specified header names. If the number of provided header names is less than the number of columns in the table, the remaining columns will not be changed. If the number of provided header names is greater than the number of columns in the table, an error will be thrown.  The converterType MUST be ADD_HEADER_NAME. 
     * @alias module:model/AddHeaderNameStructure
     * @param converterType {module:model/ConverterType} 
     * @param headerNames {Array.<String>} The header names
     */
    constructor(converterType, headerNames) { 
        
        AddHeaderNameStructure.initialize(this, converterType, headerNames);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, converterType, headerNames) { 
        obj['converterType'] = converterType;
        obj['headerNames'] = headerNames;
    }

    /**
     * Constructs a <code>AddHeaderNameStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddHeaderNameStructure} obj Optional instance to populate.
     * @return {module:model/AddHeaderNameStructure} The populated <code>AddHeaderNameStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AddHeaderNameStructure();

            if (data.hasOwnProperty('converterType')) {
                obj['converterType'] = ConverterType.constructFromObject(data['converterType']);
            }
            if (data.hasOwnProperty('headerNames')) {
                obj['headerNames'] = ApiClient.convertToType(data['headerNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AddHeaderNameStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AddHeaderNameStructure</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AddHeaderNameStructure.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['headerNames'])) {
            throw new Error("Expected the field `headerNames` to be an array in the JSON data but got " + data['headerNames']);
        }

        return true;
    }


}

AddHeaderNameStructure.RequiredProperties = ["converterType", "headerNames"];

/**
 * @member {module:model/ConverterType} converterType
 */
AddHeaderNameStructure.prototype['converterType'] = undefined;

/**
 * The header names
 * @member {Array.<String>} headerNames
 */
AddHeaderNameStructure.prototype['headerNames'] = undefined;






export default AddHeaderNameStructure;

