/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConverterType from './ConverterType';

/**
 * The MergeColumnsStructure model module.
 * @module model/MergeColumnsStructure
 * @version 1.16.0
 */
class MergeColumnsStructure {
    /**
     * Constructs a new <code>MergeColumnsStructure</code>.
     * This converter merges the specified columns into a single column. The new column will be at the lowest index of the specified columns. The new column will have the specified header name. If there are multiple non-empty cells in the specified columns, the non-empty cell with the lowest index will be used. If you want to change that, you can use the precedenceOrder property. The precedenceOrder property specifies the order in which the cells will be checked for non-empty values. If not all specified columns are in the precedenceOrder, the remaining columns will be checked after the precedenceOrder. If there are indices in the precedenceOrder that are not in the specified columns, an error will the thrown. If there are no non-empty cells in the specified columns the cell will be empty.  The converterType MUST be MERGE_COLUMNS. 
     * @alias module:model/MergeColumnsStructure
     * @param converterType {module:model/ConverterType} 
     * @param columnIndex {Array.<Number>} The indices of the columns to merge
     * @param headerName {String} The name of the new column
     */
    constructor(converterType, columnIndex, headerName) { 
        
        MergeColumnsStructure.initialize(this, converterType, columnIndex, headerName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, converterType, columnIndex, headerName) { 
        obj['converterType'] = converterType;
        obj['columnIndex'] = columnIndex;
        obj['headerName'] = headerName;
    }

    /**
     * Constructs a <code>MergeColumnsStructure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MergeColumnsStructure} obj Optional instance to populate.
     * @return {module:model/MergeColumnsStructure} The populated <code>MergeColumnsStructure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergeColumnsStructure();

            if (data.hasOwnProperty('converterType')) {
                obj['converterType'] = ConverterType.constructFromObject(data['converterType']);
            }
            if (data.hasOwnProperty('columnIndex')) {
                obj['columnIndex'] = ApiClient.convertToType(data['columnIndex'], ['Number']);
            }
            if (data.hasOwnProperty('headerName')) {
                obj['headerName'] = ApiClient.convertToType(data['headerName'], 'String');
            }
            if (data.hasOwnProperty('precedenceOrder')) {
                obj['precedenceOrder'] = ApiClient.convertToType(data['precedenceOrder'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergeColumnsStructure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergeColumnsStructure</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MergeColumnsStructure.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['columnIndex'])) {
            throw new Error("Expected the field `columnIndex` to be an array in the JSON data but got " + data['columnIndex']);
        }
        // ensure the json data is a string
        if (data['headerName'] && !(typeof data['headerName'] === 'string' || data['headerName'] instanceof String)) {
            throw new Error("Expected the field `headerName` to be a primitive type in the JSON string but got " + data['headerName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['precedenceOrder'])) {
            throw new Error("Expected the field `precedenceOrder` to be an array in the JSON data but got " + data['precedenceOrder']);
        }

        return true;
    }


}

MergeColumnsStructure.RequiredProperties = ["converterType", "columnIndex", "headerName"];

/**
 * @member {module:model/ConverterType} converterType
 */
MergeColumnsStructure.prototype['converterType'] = undefined;

/**
 * The indices of the columns to merge
 * @member {Array.<Number>} columnIndex
 */
MergeColumnsStructure.prototype['columnIndex'] = undefined;

/**
 * The name of the new column
 * @member {String} headerName
 */
MergeColumnsStructure.prototype['headerName'] = undefined;

/**
 * The order in which the cells will be checked for non-empty values
 * @member {Array.<Number>} precedenceOrder
 */
MergeColumnsStructure.prototype['precedenceOrder'] = undefined;






export default MergeColumnsStructure;

