/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnTypeMismatch from './ColumnTypeMismatch';
import ReportType from './ReportType';

/**
 * The ColumnTypeMismatchReport model module.
 * @module model/ColumnTypeMismatchReport
 * @version 1.16.0
 */
class ColumnTypeMismatchReport {
    /**
     * Constructs a new <code>ColumnTypeMismatchReport</code>.
     * This report indicates that entries in the specified column are not of the same type. This excludes the first row as it assumes the first row is a header.  The reportType MUST be COLUMN_TYPE_MISMATCH. 
     * @alias module:model/ColumnTypeMismatchReport
     * @param reportType {module:model/ReportType} 
     * @param mismatches {Array.<module:model/ColumnTypeMismatch>} 
     */
    constructor(reportType, mismatches) { 
        
        ColumnTypeMismatchReport.initialize(this, reportType, mismatches);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, reportType, mismatches) { 
        obj['reportType'] = reportType;
        obj['mismatches'] = mismatches;
    }

    /**
     * Constructs a <code>ColumnTypeMismatchReport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColumnTypeMismatchReport} obj Optional instance to populate.
     * @return {module:model/ColumnTypeMismatchReport} The populated <code>ColumnTypeMismatchReport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColumnTypeMismatchReport();

            if (data.hasOwnProperty('reportType')) {
                obj['reportType'] = ReportType.constructFromObject(data['reportType']);
            }
            if (data.hasOwnProperty('mismatches')) {
                obj['mismatches'] = ApiClient.convertToType(data['mismatches'], [ColumnTypeMismatch]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColumnTypeMismatchReport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColumnTypeMismatchReport</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ColumnTypeMismatchReport.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['mismatches']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mismatches'])) {
                throw new Error("Expected the field `mismatches` to be an array in the JSON data but got " + data['mismatches']);
            }
            // validate the optional field `mismatches` (array)
            for (const item of data['mismatches']) {
                ColumnTypeMismatch.validateJSON(item);
            };
        }

        return true;
    }


}

ColumnTypeMismatchReport.RequiredProperties = ["reportType", "mismatches"];

/**
 * @member {module:model/ReportType} reportType
 */
ColumnTypeMismatchReport.prototype['reportType'] = undefined;

/**
 * @member {Array.<module:model/ColumnTypeMismatch>} mismatches
 */
ColumnTypeMismatchReport.prototype['mismatches'] = undefined;






export default ColumnTypeMismatchReport;

