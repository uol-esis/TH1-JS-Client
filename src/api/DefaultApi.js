/**
 * TH1
 * TH1
 *
 * The version of the OpenAPI document: 1.25.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Feedback from '../model/Feedback';
import TableStructure from '../model/TableStructure';
import TableStructureGenerationResponse from '../model/TableStructureGenerationResponse';
import TableStructureGenerationSettings from '../model/TableStructureGenerationSettings';
import TableStructureSummary from '../model/TableStructureSummary';

/**
* Default service.
* @module api/DefaultApi
* @version 1.25.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the convertTable operation.
     * @callback module:api/DefaultApi~convertTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a table and save it to the database
     * @param {Number} tableStructureId 
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [mode = 'CREATE')] 
     * @param {module:api/DefaultApi~convertTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    convertTable(tableStructureId, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tableStructureId' is set
      if (tableStructureId === undefined || tableStructureId === null) {
        throw new Error("Missing the required parameter 'tableStructureId' when calling convertTable");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling convertTable");
      }

      let pathParams = {
        'tableStructureId': tableStructureId
      };
      let queryParams = {
        'mode': opts['mode']
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/converter/{tableStructureId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTableStructure operation.
     * @callback module:api/DefaultApi~createTableStructureCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new table structure
     * @param {module:model/TableStructure} tableStructure 
     * @param {module:api/DefaultApi~createTableStructureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    createTableStructure(tableStructure, callback) {
      let postBody = tableStructure;
      // verify the required parameter 'tableStructure' is set
      if (tableStructure === undefined || tableStructure === null) {
        throw new Error("Missing the required parameter 'tableStructure' when calling createTableStructure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/table-structures', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTableStructure operation.
     * @callback module:api/DefaultApi~deleteTableStructureCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete table structure by id
     * @param {Number} id 
     * @param {module:api/DefaultApi~deleteTableStructureCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTableStructure(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTableStructure");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/table-structures/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fileConvertTable operation.
     * @callback module:api/DefaultApi~fileConvertTableCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a table and return the result as a file
     * @param {File} file 
     * @param {module:model/TableStructure} tableStructure 
     * @param {module:api/DefaultApi~fileConvertTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    fileConvertTable(file, tableStructure, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling fileConvertTable");
      }
      // verify the required parameter 'tableStructure' is set
      if (tableStructure === undefined || tableStructure === null) {
        throw new Error("Missing the required parameter 'tableStructure' when calling fileConvertTable");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'tableStructure': tableStructure
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/converter/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateTableStructure operation.
     * @callback module:api/DefaultApi~generateTableStructureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableStructureGenerationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a tableStructure and return the result as a json
     * @param {File} file 
     * @param {module:model/TableStructureGenerationSettings} settings 
     * @param {module:api/DefaultApi~generateTableStructureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableStructureGenerationResponse}
     */
    generateTableStructure(file, settings, callback) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling generateTableStructure");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling generateTableStructure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'settings': settings
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = TableStructureGenerationResponse;
      return this.apiClient.callApi(
        '/table-structures/generate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTableStructure operation.
     * @callback module:api/DefaultApi~getTableStructureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TableStructure} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a table structure by id
     * @param {Number} id 
     * @param {module:api/DefaultApi~getTableStructureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TableStructure}
     */
    getTableStructure(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTableStructure");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TableStructure;
      return this.apiClient.callApi(
        '/table-structures/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTableStructures operation.
     * @callback module:api/DefaultApi~getTableStructuresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TableStructureSummary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all table structures
     * @param {module:api/DefaultApi~getTableStructuresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TableStructureSummary>}
     */
    getTableStructures(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TableStructureSummary];
      return this.apiClient.callApi(
        '/table-structures', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previewConvertTable operation.
     * @callback module:api/DefaultApi~previewConvertTableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<[String]>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert a table and return a preview of the result
     * @param {File} file 
     * @param {module:model/TableStructure} tableStructure 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] 
     * @param {module:api/DefaultApi~previewConvertTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<[String]>}
     */
    previewConvertTable(file, tableStructure, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling previewConvertTable");
      }
      // verify the required parameter 'tableStructure' is set
      if (tableStructure === undefined || tableStructure === null) {
        throw new Error("Missing the required parameter 'tableStructure' when calling previewConvertTable");
      }

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'tableStructure': tableStructure
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [['String']];
      return this.apiClient.callApi(
        '/converter/preview', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitFeedback operation.
     * @callback module:api/DefaultApi~submitFeedbackCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit feedback
     * @param {module:model/Feedback} feedback 
     * @param {module:api/DefaultApi~submitFeedbackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    submitFeedback(feedback, callback) {
      let postBody = feedback;
      // verify the required parameter 'feedback' is set
      if (feedback === undefined || feedback === null) {
        throw new Error("Missing the required parameter 'feedback' when calling submitFeedback");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oAuth2Auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/feedback', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
